the plan

- we have a line buffer
- we read a line from VDMA
- we have a outptr indicating how much of the line is already sent to the output
  - increased whenever cur_x is increased
  - reset whenever cur_y is increased/reset
- we have an inptr indicating how much of the active line was already read
  - increased whenever _valid_ signal came from master (vdma stream)
  - resets when inptr >= WIDTH

[############*******************************]
            ^               ^
            |               |
            inptr           outptr

  # line 2
  * line 1

- inptr moves faster, so we need to take care not to overwrite outptr
  - should we use two buffers and toggle?
  - we can use a long buffer that is split in 2 halves (double buffer)

line 2                            line 1
[############                   ] [*******************************]
            ^                                 ^
            |                                 | 
            inptr                             outptr

line 1 has been filled, inptr is working on line 2.
when outptr is finished, it will start outputting half 2.

- when inptr is done reading a line, we stop the input by setting vdma_ready = 0
- when do we launch inptr again?
  - when outptr is _near_ the end, i.e. outptr == WIDTH-64 or some kind of threshold

- if we make sure that outptr has already sent more than 50% or 75% or so of pixels, we can use the same buffer because inptr won't catch up and overwrite.

- outptr moves only every n-th clock (2nd for 16 bit, 4th for 8 bit)
- inptr moves every clock

- we should probably count VDMA input lines as well, increased when inptr wraps

